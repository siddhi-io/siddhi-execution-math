{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution Math The siddhi-execution-math extension is a Siddhi extension that provides useful mathematical functions such as power, round, random, cos, log, etc. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 5.0.6 . Features percentile ( Aggregate Function ) This functions returns the pth percentile value of a given argument. abs ( Function ) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. acos ( Function ) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. asin ( Function ) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. atan ( Function ) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. bin ( Function ) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. cbrt ( Function ) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. ceil ( Function ) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. conv ( Function ) This function converts a from the fromBase base to the toBase base. copySign ( Function ) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. cos ( Function ) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. cosh ( Function ) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. e ( Function ) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. exp ( Function ) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. floor ( Function ) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. getExponent ( Function ) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. hex ( Function ) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. isInfinite ( Function ) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. isNan ( Function ) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. ln ( Function ) This function returns the natural logarithm (base e) of p1 . log ( Function ) This function returns the logarithm of the received number as per the given base . log10 ( Function ) This function returns the base 10 logarithm of p1 . log2 ( Function ) This function returns the base 2 logarithm of p1 . max ( Function ) This function returns the greater value of p1 and p2 . min ( Function ) This function returns the smaller value of p1 and p2 . oct ( Function ) This function converts the input parameter p1 to octal. parseDouble ( Function ) This function returns the double value of the string received. parseFloat ( Function ) This function returns the float value of the received string. parseInt ( Function ) This function returns the integer value of the received string. parseLong ( Function ) This function returns the long value of the string received. pi ( Function ) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. power ( Function ) This function raises the given value to a given power. rand ( Function ) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. round ( Function ) This function returns the value of the input argument rounded off to the closest integer/long value. signum ( Function ) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. sin ( Function ) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. sinh ( Function ) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. sqrt ( Function ) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. tan ( Function ) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. tanh ( Function ) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. toDegrees ( Function ) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. toRadians ( Function ) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-math","text":"The siddhi-execution-math extension is a Siddhi extension that provides useful mathematical functions such as power, round, random, cos, log, etc. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution Math"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 5.0.6 .","title":"Latest API Docs"},{"location":"#features","text":"percentile ( Aggregate Function ) This functions returns the pth percentile value of a given argument. abs ( Function ) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. acos ( Function ) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. asin ( Function ) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. atan ( Function ) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. bin ( Function ) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. cbrt ( Function ) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. ceil ( Function ) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. conv ( Function ) This function converts a from the fromBase base to the toBase base. copySign ( Function ) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. cos ( Function ) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. cosh ( Function ) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. e ( Function ) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. exp ( Function ) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. floor ( Function ) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. getExponent ( Function ) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. hex ( Function ) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. isInfinite ( Function ) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. isNan ( Function ) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. ln ( Function ) This function returns the natural logarithm (base e) of p1 . log ( Function ) This function returns the logarithm of the received number as per the given base . log10 ( Function ) This function returns the base 10 logarithm of p1 . log2 ( Function ) This function returns the base 2 logarithm of p1 . max ( Function ) This function returns the greater value of p1 and p2 . min ( Function ) This function returns the smaller value of p1 and p2 . oct ( Function ) This function converts the input parameter p1 to octal. parseDouble ( Function ) This function returns the double value of the string received. parseFloat ( Function ) This function returns the float value of the received string. parseInt ( Function ) This function returns the integer value of the received string. parseLong ( Function ) This function returns the long value of the string received. pi ( Function ) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. power ( Function ) This function raises the given value to a given power. rand ( Function ) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. round ( Function ) This function returns the value of the input argument rounded off to the closest integer/long value. signum ( Function ) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. sin ( Function ) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. sinh ( Function ) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. sqrt ( Function ) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. tan ( Function ) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. tanh ( Function ) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. toDegrees ( Function ) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. toRadians ( Function ) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2017 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.10/","text":"API Docs - v4.0.10 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.10"},{"location":"api/4.0.10/#api-docs-v4010","text":"","title":"API Docs - v4.0.10"},{"location":"api/4.0.10/#math","text":"","title":"Math"},{"location":"api/4.0.10/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.10/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.10/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.10/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.10/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.10/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.10/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.10/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.10/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.10/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.10/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.10/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.10/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.10/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.10/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.10/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.10/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.10/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.10/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.10/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.10/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.10/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.10/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.10/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.10/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.10/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.10/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.10/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.10/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.10/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.10/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.10/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.10/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.10/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.10/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.10/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.10/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.10/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.10/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.10/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.10/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.10/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.11/","text":"API Docs - v4.0.11 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.11"},{"location":"api/4.0.11/#api-docs-v4011","text":"","title":"API Docs - v4.0.11"},{"location":"api/4.0.11/#math","text":"","title":"Math"},{"location":"api/4.0.11/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.11/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.11/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.11/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.11/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.11/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.11/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.11/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.11/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.11/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.11/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.11/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.11/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.11/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.11/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.11/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.11/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.11/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.11/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.11/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.11/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.11/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.11/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.11/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.11/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.11/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.11/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.11/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.11/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.11/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.11/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.11/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.11/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.11/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.11/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.11/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.11/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.11/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.11/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.11/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.11/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.11/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.12/","text":"API Docs - v4.0.12 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.12"},{"location":"api/4.0.12/#api-docs-v4012","text":"","title":"API Docs - v4.0.12"},{"location":"api/4.0.12/#math","text":"","title":"Math"},{"location":"api/4.0.12/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.12/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.12/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.12/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.12/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.12/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.12/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.12/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.12/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.12/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.12/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.12/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.12/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.12/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.12/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.12/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.12/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.12/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.12/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.12/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.12/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.12/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.12/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.12/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.12/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.12/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.12/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.12/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.12/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.12/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.12/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.12/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.12/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.12/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.12/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.12/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.12/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.12/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.12/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.12/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.12/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.12/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.13/","text":"API Docs - v4.0.13 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.13"},{"location":"api/4.0.13/#api-docs-v4013","text":"","title":"API Docs - v4.0.13"},{"location":"api/4.0.13/#math","text":"","title":"Math"},{"location":"api/4.0.13/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.13/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.13/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.13/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.13/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.13/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.13/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.13/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.13/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.13/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.13/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.13/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.13/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.13/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.13/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.13/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.13/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.13/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.13/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.13/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.13/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.13/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.13/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.13/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.13/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.13/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.13/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.13/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.13/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.13/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.13/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.13/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.13/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.13/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.13/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.13/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.13/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.13/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.13/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.13/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.13/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.13/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.14/","text":"API Docs - v4.0.14 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.14"},{"location":"api/4.0.14/#api-docs-v4014","text":"","title":"API Docs - v4.0.14"},{"location":"api/4.0.14/#math","text":"","title":"Math"},{"location":"api/4.0.14/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.14/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.14/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.14/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.14/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.14/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.14/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.14/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.14/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.14/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.14/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.14/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.14/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.14/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.14/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.14/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.14/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.14/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.14/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.14/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.14/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.14/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.14/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.14/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.14/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.14/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.14/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.14/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.14/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.14/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.14/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.14/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.14/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.14/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.14/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.14/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.14/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.14/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.14/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.14/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.14/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.14/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.15/","text":"API Docs - v4.0.15 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.15"},{"location":"api/4.0.15/#api-docs-v4015","text":"","title":"API Docs - v4.0.15"},{"location":"api/4.0.15/#math","text":"","title":"Math"},{"location":"api/4.0.15/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.15/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.15/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.15/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.15/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.15/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.15/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.15/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.15/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.15/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.15/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.15/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.15/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.15/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.15/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.15/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.15/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.15/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.15/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.15/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.15/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.15/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.15/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.15/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.15/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.15/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.15/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.15/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.15/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.15/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.15/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.15/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.15/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.15/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.15/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.15/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.15/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.15/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.15/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.15/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.15/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.15/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.16/","text":"API Docs - v4.0.16 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.16"},{"location":"api/4.0.16/#api-docs-v4016","text":"","title":"API Docs - v4.0.16"},{"location":"api/4.0.16/#math","text":"","title":"Math"},{"location":"api/4.0.16/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.16/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.16/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.16/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.16/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.16/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.16/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.16/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.16/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.16/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.16/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.16/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.16/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.16/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.16/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.16/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.16/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.16/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.16/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.16/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.16/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.16/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.16/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.16/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.16/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.16/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.16/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.16/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.16/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.16/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.16/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.16/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.16/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.16/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.16/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.16/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.16/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.16/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.16/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.16/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.16/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.16/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Math percentile (Aggregate Function) Returns the pth percentile value of the given argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of the given parameter value. This function wraps the `java.lang.Math.abs()` function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.acos()` function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.asin()` function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1. 2.If p1 is received along with an optional p1, considers them as x,y coordinates and returns the respective arc-tangent (inverse tangent) of the p1, p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long `p1` argument as an unsigned integer in base 2. This function wraps the `java.lang.Integer.toBinaryString` and `java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of `p1` that is in radians. This function wraps the `java .lang.Math.cbrt()` function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the `p1` argument, and is equal to a mathematical integer. This function wraps the `java.lang.Math.ceil ()` method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the `fromBase` base to the `toBase` base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns a value with the received `magnitude` and the `sign`. This function wraps the `java.lang.Math.copySign()` function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of `p1` that is in radians. This function wraps the `java.lang .Math.cos()` function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of `p1` that is in radians. This function wraps the `java.lang.Math.cosh()` function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the `java.lang.Math.E` constant, which is the closest double value to `e`, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns the Euler's number `e` raised to the power of `p1`. This function wraps the `java.lang.Math.exp()` function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the `java.lang.Math.floor()` function, which returns the largest (closest to positive infinity) value that is less than or equal to `p1`, and is equal to a mathematical integer . Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent * s (Function) * Returns the unbiased exponent that is used in the representation of `p1`. This function wraps the `java.lang.Math.getExponent()` function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) Wraps the `java.lang.Double.toHexString()` function that returns a hexadecimal string representation of `p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite * (Function) * Wraps the `java.lang.Float.isInfinite()` and `java.lang.Double.isInfinite()` functions and returns `true` if `p1` is infinitely large in magnitude and returns `false` if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) Wraps the `java.lang.Float.isNaN()` and `java.lang.Double.isNaN()` functions and returns `true` if `p1` is a NaN (Not-a-Number) value and returns `false` if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of `p1`. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm of the received `number` as per the given `base`. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of `p1`. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which base 10 logarithm should be found . INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of `p1`. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of `p1` and `p2`. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding the largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of `p1` and `p2`. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts `p1` to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble * (Function) * Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat * (Function) * Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong * (Function) * Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the `java.lang.Math.PI` constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns a value by raising the given value to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to .power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) Returns stream of pseudo-random numbers when a sequence of calls are sent to the `rand()`. Optionally, it is possible to define a seed, i.e., `rand(seed)` using which the pseudo-random numbers are generated. These functions use the `java.util.Random` class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the `java.lang.Math.signum()` function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of the value given in radians. This function wraps the `java.lang.Math.sin()` function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of the given value in radians). This function wraps the `java.lang.Math.sinh()` function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of the given value. This function wraps the `java.lang.Math .sqrt()` function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found . INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of the value given in radians. This function wraps the `java .lang.Math.tan()` function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of the given value in radians. This function wraps the `java.lang.Math.tanh()` function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees * (Function) * Converts the given value in radians to degrees. This function wraps the `java.lang .Math.toDegrees()` function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians * (Function) * Converts the value given in degrees to radians. This function wraps the `java.lang .Math.toRadians()` function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#math","text":"","title":"Math"},{"location":"api/4.0.17/#percentile-aggregate-function","text":"Returns the pth percentile value of the given argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.17/#abs-function","text":"Returns the absolute value of the given parameter value. This function wraps the `java.lang.Math.abs()` function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.17/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.acos()` function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.17/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the `java.lang.Math.asin()` function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.17/#atan-function","text":"1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1. 2.If p1 is received along with an optional p1, considers them as x,y coordinates and returns the respective arc-tangent (inverse tangent) of the p1, p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.17/#bin-function","text":"Returns a string representation of the integer/long `p1` argument as an unsigned integer in base 2. This function wraps the `java.lang.Integer.toBinaryString` and `java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.17/#cbrt-function","text":"Returns the cube-root of `p1` that is in radians. This function wraps the `java .lang.Math.cbrt()` function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.17/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the `p1` argument, and is equal to a mathematical integer. This function wraps the `java.lang.Math.ceil ()` method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.17/#conv-function","text":"Converts a from the `fromBase` base to the `toBase` base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.17/#copysign-function","text":"Returns a value with the received `magnitude` and the `sign`. This function wraps the `java.lang.Math.copySign()` function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.17/#cos-function","text":"Returns the cosine of `p1` that is in radians. This function wraps the `java.lang .Math.cos()` function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.17/#cosh-function","text":"Returns the hyperbolic cosine of `p1` that is in radians. This function wraps the `java.lang.Math.cosh()` function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.17/#e-function","text":"Returns the `java.lang.Math.E` constant, which is the closest double value to `e`, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.17/#exp-function","text":"Returns the Euler's number `e` raised to the power of `p1`. This function wraps the `java.lang.Math.exp()` function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.17/#floor-function","text":"This function wraps the `java.lang.Math.floor()` function, which returns the largest (closest to positive infinity) value that is less than or equal to `p1`, and is equal to a mathematical integer . Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.17/#getexponent-s","text":"(Function) * Returns the unbiased exponent that is used in the representation of `p1`. This function wraps the `java.lang.Math.getExponent()` function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent *s"},{"location":"api/4.0.17/#hex-function","text":"Wraps the `java.lang.Double.toHexString()` function that returns a hexadecimal string representation of `p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.17/#isinfinite","text":"(Function) * Wraps the `java.lang.Float.isInfinite()` and `java.lang.Double.isInfinite()` functions and returns `true` if `p1` is infinitely large in magnitude and returns `false` if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite *"},{"location":"api/4.0.17/#isnan-function","text":"Wraps the `java.lang.Float.isNaN()` and `java.lang.Double.isNaN()` functions and returns `true` if `p1` is a NaN (Not-a-Number) value and returns `false` if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.17/#ln-function","text":"Returns the natural logarithm (base e) of `p1`. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.17/#log-function","text":"Returns the logarithm of the received `number` as per the given `base`. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.17/#log10-function","text":"Returns the base 10 logarithm of `p1`. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which base 10 logarithm should be found . INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.17/#log2-function","text":"Returns the base 2 logarithm of `p1`. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.17/#max-function","text":"Returns the greater value out of `p1` and `p2`. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding the largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.17/#min-function","text":"Returns the smaller value out of `p1` and `p2`. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.17/#oct-function","text":"Converts `p1` to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.17/#parsedouble","text":"(Function) * Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble *"},{"location":"api/4.0.17/#parsefloat","text":"(Function) * Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat *"},{"location":"api/4.0.17/#parseint-function","text":"Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.17/#parselong-function","text":"* Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong *(Function)"},{"location":"api/4.0.17/#pi-function","text":"Returns the `java.lang.Math.PI` constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.17/#power-function","text":"Returns a value by raising the given value to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to .power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.17/#rand-function","text":"Returns stream of pseudo-random numbers when a sequence of calls are sent to the `rand()`. Optionally, it is possible to define a seed, i.e., `rand(seed)` using which the pseudo-random numbers are generated. These functions use the `java.util.Random` class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.17/#round-function","text":"Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.17/#signum-function","text":"Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the `java.lang.Math.signum()` function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.17/#sin-function","text":"Returns the sine of the value given in radians. This function wraps the `java.lang.Math.sin()` function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.17/#sinh-function","text":"Returns the hyperbolic sine of the given value in radians). This function wraps the `java.lang.Math.sinh()` function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.17/#sqrt-function","text":"Returns the square-root of the given value. This function wraps the `java.lang.Math .sqrt()` function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found . INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.17/#tan-function","text":"Returns the tan of the value given in radians. This function wraps the `java .lang.Math.tan()` function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.17/#tanh-function","text":"Returns the hyperbolic tangent of the given value in radians. This function wraps the `java.lang.Math.tanh()` function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.17/#todegrees-function","text":"* Converts the given value in radians to degrees. This function wraps the `java.lang .Math.toDegrees()` function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees *(Function)"},{"location":"api/4.0.17/#toradians-function","text":"* Converts the value given in degrees to radians. This function wraps the `java.lang .Math.toRadians()` function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians *(Function)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Math percentile (Aggregate Function) Returns the pth percentile value of the argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of the given parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1 . 2. If p1 is received along with an optional p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the p1 , p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 that is in radians. This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returs a value with the received magnitude and the sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 that is in radians. This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 that is in radians. This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns the Euler's number e raised to the power of p1 . This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function, which returns the largest (closest to positive infinity) value that is less that or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) Wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1 . Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) Wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions and returns true if p1 is infinitely large in magnitude and returns false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) Wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is a NaN (Not-a-Number) value, and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns a value by raising to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) Returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions use the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of the given value. This function wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of the given value in radians. This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of the value given in radians. This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts the value given in radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts the value given in degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#math","text":"","title":"Math"},{"location":"api/4.0.18/#percentile-aggregate-function","text":"Returns the pth percentile value of the argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.18/#abs-function","text":"Returns the absolute value of the given parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.18/#acos-function","text":"If -1 = p1 = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.18/#asin-function","text":"If -1 = p1 = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.18/#atan-function","text":"1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1 . 2. If p1 is received along with an optional p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the p1 , p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.18/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.18/#cbrt-function","text":"Returns the cube-root of p1 that is in radians. This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.18/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.18/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.18/#copysign-function","text":"Returs a value with the received magnitude and the sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.18/#cos-function","text":"Returns the cosine of p1 that is in radians. This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.18/#cosh-function","text":"Returns the hyperbolic cosine of p1 that is in radians. This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.18/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.18/#exp-function","text":"Returns the Euler's number e raised to the power of p1 . This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.18/#floor-function","text":"This function wraps the java.lang.Math.floor() function, which returns the largest (closest to positive infinity) value that is less that or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.18/#getexponent-function","text":"Returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.18/#hex-function","text":"Wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1 . Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.18/#isinfinite-function","text":"Wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions and returns true if p1 is infinitely large in magnitude and returns false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.18/#isnan-function","text":"Wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is a NaN (Not-a-Number) value, and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.18/#ln-function","text":"Returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.18/#log-function","text":"Returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.18/#log10-function","text":"Returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.18/#log2-function","text":"Returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.18/#max-function","text":"Returns the greater value out of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.18/#min-function","text":"Returns the smaller value out of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.18/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.18/#parsedouble-function","text":"Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.18/#parsefloat-function","text":"Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.18/#parseint-function","text":"Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.18/#parselong-function","text":"Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.18/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.18/#power-function","text":"Returns a value by raising to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.18/#rand-function","text":"Returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions use the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.18/#round-function","text":"Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.18/#signum-function","text":"Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.18/#sin-function","text":"Returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.18/#sinh-function","text":"Returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.18/#sqrt-function","text":"Returns the square-root of the given value. This function wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.18/#tan-function","text":"Returns the tan of the given value in radians. This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.18/#tanh-function","text":"Returns the hyperbolic tangent of the value given in radians. This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.18/#todegrees-function","text":"Converts the value given in radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.18/#toradians-function","text":"Converts the value given in degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Math percentile (Aggregate Function) Returns the pth percentile value of the argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of the given parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1 . 2. If p1 is received along with an optional p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the p1 , p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 that is in radians. This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returs a value with the received magnitude and the sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 that is in radians. This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 that is in radians. This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns the Euler's number e raised to the power of p1 . This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function, which returns the largest (closest to positive infinity) value that is less that or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) Wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1 . Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) Wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions and returns true if p1 is infinitely large in magnitude and returns false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) Wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is a NaN (Not-a-Number) value, and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns a value by raising to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) Returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions use the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of the given value. This function wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of the given value in radians. This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of the value given in radians. This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts the value given in radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts the value given in degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#math","text":"","title":"Math"},{"location":"api/4.0.19/#percentile-aggregate-function","text":"Returns the pth percentile value of the argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.19/#abs-function","text":"Returns the absolute value of the given parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.19/#acos-function","text":"If -1 = p1 = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.19/#asin-function","text":"If -1 = p1 = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.19/#atan-function","text":"1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1 . 2. If p1 is received along with an optional p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the p1 , p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.19/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.19/#cbrt-function","text":"Returns the cube-root of p1 that is in radians. This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.19/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.19/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.19/#copysign-function","text":"Returs a value with the received magnitude and the sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.19/#cos-function","text":"Returns the cosine of p1 that is in radians. This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.19/#cosh-function","text":"Returns the hyperbolic cosine of p1 that is in radians. This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.19/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.19/#exp-function","text":"Returns the Euler's number e raised to the power of p1 . This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.19/#floor-function","text":"This function wraps the java.lang.Math.floor() function, which returns the largest (closest to positive infinity) value that is less that or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.19/#getexponent-function","text":"Returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.19/#hex-function","text":"Wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1 . Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.19/#isinfinite-function","text":"Wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions and returns true if p1 is infinitely large in magnitude and returns false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.19/#isnan-function","text":"Wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is a NaN (Not-a-Number) value, and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.19/#ln-function","text":"Returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.19/#log-function","text":"Returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.19/#log10-function","text":"Returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.19/#log2-function","text":"Returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.19/#max-function","text":"Returns the greater value out of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.19/#min-function","text":"Returns the smaller value out of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.19/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.19/#parsedouble-function","text":"Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.19/#parsefloat-function","text":"Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.19/#parseint-function","text":"Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.19/#parselong-function","text":"Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.19/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.19/#power-function","text":"Returns a value by raising to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.19/#rand-function","text":"Returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions use the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.19/#round-function","text":"Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.19/#signum-function","text":"Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.19/#sin-function","text":"Returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.19/#sinh-function","text":"Returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.19/#sqrt-function","text":"Returns the square-root of the given value. This function wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.19/#tan-function","text":"Returns the tan of the given value in radians. This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.19/#tanh-function","text":"Returns the hyperbolic tangent of the value given in radians. This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.19/#todegrees-function","text":"Converts the value given in radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.19/#toradians-function","text":"Converts the value given in degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.20/","text":"API Docs - v4.0.20 Math percentile (Aggregate Function) Returns the pth percentile value of the argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of the given parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1 . 2. If p1 is received along with an optional p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the p1 , p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 that is in radians. This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returs a value with the received magnitude and the sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 that is in radians. This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 that is in radians. This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns the Euler's number e raised to the power of p1 . This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function, which returns the largest (closest to positive infinity) value that is less that or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) Wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1 . Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) Wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions and returns true if p1 is infinitely large in magnitude and returns false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) Wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is a NaN (Not-a-Number) value, and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns a value by raising to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) Returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions use the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of the given value. This function wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of the given value in radians. This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of the value given in radians. This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts the value given in radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts the value given in degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.20"},{"location":"api/4.0.20/#api-docs-v4020","text":"","title":"API Docs - v4.0.20"},{"location":"api/4.0.20/#math","text":"","title":"Math"},{"location":"api/4.0.20/#percentile-aggregate-function","text":"Returns the pth percentile value of the argument values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.20/#abs-function","text":"Returns the absolute value of the given parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.20/#acos-function","text":"If -1 = p1 = 1, returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.20/#asin-function","text":"If -1 = p1 = 1, returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The returned value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.20/#atan-function","text":"1. If a single p1 is received, returns the arc-tangent (inverse tangent) of p1 . 2. If p1 is received along with an optional p1 , considers them as x,y coordinates and returnsthe respective arc-tangent (inverse tangent) of the p1 , p2 coordinates. 3.The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.20/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.20/#cbrt-function","text":"Returns the cube-root of p1 that is in radians. This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.20/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.20/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.20/#copysign-function","text":"Returs a value with the received magnitude and the sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.20/#cos-function","text":"Returns the cosine of p1 that is in radians. This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.20/#cosh-function","text":"Returns the hyperbolic cosine of p1 that is in radians. This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.20/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e, which is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.20/#exp-function","text":"Returns the Euler's number e raised to the power of p1 . This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.20/#floor-function","text":"This function wraps the java.lang.Math.floor() function, which returns the largest (closest to positive infinity) value that is less that or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.20/#getexponent-function","text":"Returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.20/#hex-function","text":"Wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1 . Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.20/#isinfinite-function","text":"Wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions and returns true if p1 is infinitely large in magnitude and returns false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.20/#isnan-function","text":"Wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is a NaN (Not-a-Number) value, and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.20/#ln-function","text":"Returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.20/#log-function","text":"Returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.20/#log10-function","text":"Returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.20/#log2-function","text":"Returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.20/#max-function","text":"Returns the greater value out of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.20/#min-function","text":"Returns the smaller value out of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.20/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.20/#parsedouble-function","text":"Returns the double value of the received string. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.20/#parsefloat-function","text":"Returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.20/#parseint-function","text":"Returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.20/#parselong-function","text":"Returns the long value of the received string. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.20/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.20/#power-function","text":"Returns a value by raising to the given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.20/#rand-function","text":"Returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions use the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.20/#round-function","text":"Returns the closest integer/long value depending on the input argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.20/#signum-function","text":"Returns +1, 0, or -1 for the given positive, zero, and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.20/#sin-function","text":"Returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.20/#sinh-function","text":"Returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.20/#sqrt-function","text":"Returns the square-root of the given value. This function wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.20/#tan-function","text":"Returns the tan of the given value in radians. This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.20/#tanh-function","text":"Returns the hyperbolic tangent of the value given in radians. This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.20/#todegrees-function","text":"Converts the value given in radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.20/#toradians-function","text":"Converts the value given in degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.21/","text":"API Docs - v4.0.21 Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"4.0.21"},{"location":"api/4.0.21/#api-docs-v4021","text":"","title":"API Docs - v4.0.21"},{"location":"api/4.0.21/#math","text":"","title":"Math"},{"location":"api/4.0.21/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/4.0.21/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/4.0.21/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.21/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.21/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.21/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/4.0.21/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.21/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.21/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.21/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.21/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.21/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.21/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/4.0.21/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.21/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.21/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.21/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.21/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.21/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.21/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.21/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.21/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.21/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.21/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.21/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.21/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.21/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.21/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.21/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.21/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.21/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.21/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.21/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/4.0.21/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.21/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.21/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.21/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.21/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.21/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.21/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.21/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.21/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.0.9/","text":"API Docs - v4.0.9 Math percentile (Aggregate Function) Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0) abs (Function) Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989. atan (Function) 1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352. bin (Function) Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\". cbrt (Function) Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356. ceil (Function) Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0. conv (Function) Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\". copySign (Function) Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6. cos (Function) Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661. cosh (Function) Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559. e (Function) Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354. exp (Function) Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0. getExponent (Function) Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true. ln (Function) Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579. log (Function) Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034. log10 (Function) Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832. log2 (Function) Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696. max (Function) Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67. min (Function) Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91. oct (Function) Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\". parseDouble (Function) Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0. parseFloat (Function) Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0. parseInt (Function) Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123. parseLong (Function) Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123. pi (Function) Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996. rand (Function) 1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand() round (Function) Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252. signum (Function) If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1. sin (Function) Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586. sinh (Function) Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922. sqrt (Function) Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2. tan (Function) Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915. tanh (Function) Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956. toDegrees (Function) Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394. toRadians (Function) Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"4.0.9"},{"location":"api/4.0.9/#api-docs-v409","text":"","title":"API Docs - v4.0.9"},{"location":"api/4.0.9/#math","text":"","title":"Math"},{"location":"api/4.0.9/#percentile-aggregate-function","text":"Returns the pth percentile value of the arg values. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The values of which the percentile should be found INT LONG FLOAT DOUBLE No No p Estimate of which percentile to be found (pth percentile) where p is any number greater than 0 or less than or equal to 100 DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; math:percentile(temperature, 97.0)","title":"percentile (Aggregate Function)"},{"location":"api/4.0.9/#abs-function","text":"Returns the absolute value of first parameter. This function wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the absolute value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Both abs(3) and abs(-3) queries return 3 since the absolute value of both 3 and -3 is 3.","title":"abs (Function)"},{"location":"api/4.0.9/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.acos()function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-cosine (inverse cosine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.0.9/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) of p1. If not, it returns NULL. The return value is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-sin (inverse sine) should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.0.9/#atan-function","text":"1. math:atan(p1) Returns the arc-tangent (inverse tangent) of p1. The return value is in radian scale. This function wraps the java.lang.Math.atan() function. 2. Returns the arc-tangent (inverse tangent) of p1 and p2 coordinates. The return value is in radian scale. This function wraps the java.lang.Math.atan2() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of which the arc-tangent (inverse tangent) should be found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.0.9/#bin-function","text":"Returns a string representation of the integer/long p1 argument as an unsigned integer in base 2. This function wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an unsigned integer of base 2 INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; bin(9) returns \"1001\".","title":"bin (Function)"},{"location":"api/4.0.9/#cbrt-function","text":"Returns the cube-root of p1 (p1 is in radians). This function wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cube-root should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.0.9/#ceil-function","text":"Returns the smallest (closest to negative infinity) double value that is greater than or equal to the p1 argument, and is equal to a mathematical integer. This function wraps thejava.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose ceiling value should be found FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.0.9/#conv-function","text":"Converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be as a String STRING No No from.base The source base of the input parameter 'a' INT No No to.base The target base that input parameter 'a' should be converted to INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.0.9/#copysign-function","text":"Returns the magnitude of magnitude with the sign of sign . This function wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude This parameters magnitude will be used for output attribute INT LONG FLOAT DOUBLE No No sign This parameters sign will be used for output attribute INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.0.9/#cos-function","text":"Returns the cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose cosine value should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.0.9/#cosh-function","text":"Returns the hyperbolic cosine of p1 (p1 is in radians). This function wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic cosine should be found. Input must be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.0.9/#e-function","text":"Returns the java.lang.Math.E constant, which is the closest double value to e (which is the base of the natural logarithms). Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; e() returns 2.7182818284590452354.","title":"e (Function)"},{"location":"api/4.0.9/#exp-function","text":"Returns Euler's number e raised to the power of p1. This function wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.0.9/#floor-function","text":"This function wraps the java.lang.Math.floor() function that returns the largest (closest to positive infinity) value that is less that or equal to p1, and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose floor value should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; floor(10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.0.9/#getexponent-function","text":"Returns the unbiased exponent used in the representation of p1. This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.0.9/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function that returns a hexadecimal string representation of p1. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hexadecimal representation should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.0.9/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() functions that return true if p1 is infinitely large in magnitude, or return false otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if infinite FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.0.9/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions that return true if p1 is a NaN (Not-a-Number) value, or return false otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if it is a number FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.0.9/#ln-function","text":"Returns the natural logarithm (base e) of p1. Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose natural logarithm (base e) should be found INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.0.9/#log-function","text":"Returns the logarithm (base=base) of number. Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of whose base should be changed INT LONG FLOAT DOUBLE No No base The base value of the ouput INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.0.9/#log10-function","text":"Returns the base 10 logarithm of p1. Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.0.9/#log2-function","text":"Returns the base 2 logarithm of p1. Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.0.9/#max-function","text":"Returns the greater value out of p1 and p2. Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding largest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding largest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.0.9/#min-function","text":"Returns the smaller value out of p1 and p2. Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 Value one to be compared in finding smallest value INT LONG FLOAT DOUBLE No No p2 Value two to be compared in finding smallest value INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.0.9/#oct-function","text":"Converts p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.0.9/#parsedouble-function","text":"Returns str as a double. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a double STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.0.9/#parsefloat-function","text":"Returns str as a float. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a float STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.0.9/#parseint-function","text":"Returns str as a int. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a int STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.0.9/#parselong-function","text":"Returns str as a long. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.0.9/#pi-function","text":"Returns the java.lang.Math.PI constant, which is the closest value to pi (i.e. the ratio of the circumference of a circle to its diameter). Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.0.9/#power-function","text":"Returns value raised to the power of toPower. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter INT LONG FLOAT DOUBLE No No to.power The power that 'value' input parameter should be raised to INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; power(5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.0.9/#rand-function","text":"1. A sequence of calls to rand() generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. 2. A sequence of calls to rand(seed) generates a stream of pseudo-random numbers. This function uses the java.util.Random class internally. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; A random double value between 0 and 1 will be generated using math:rand()","title":"rand (Function)"},{"location":"api/4.0.9/#round-function","text":"Returns the closest integer/long (depending on the input) value to the argument. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded to the closest integer/long. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.0.9/#signum-function","text":"If a is a positive, this returns the sign of p1 as 1.0. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked if positive or negative or otherwise INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.0.9/#sin-function","text":"Returns the sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.0.9/#sinh-function","text":"Returns the hyperbolic sine of p1 (p1 is in radians). This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic sine value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.0.9/#sqrt-function","text":"Returns the square-root of p1. This function wraps the java.lang.Math.sqrt() function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.0.9/#tan-function","text":"Returns the tan of p1 (p1 is in radians). This function wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose tan value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.0.9/#tanh-function","text":"Returns the hyperbolic tangent of p1 (p1 is in radians). This function wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose hyperbolic tangent value should be found. Input should be in radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.0.9/#todegrees-function","text":"Converts p1 from radians to degrees. This function wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The radians value that should be converted to degrees INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.0.9/#toradians-function","text":"Converts p1 from degrees to radians. This function wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The degrees value that should be converted to radians INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.1.0/","text":"API Docs - v4.1.0 Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"4.1.0"},{"location":"api/4.1.0/#api-docs-v410","text":"","title":"API Docs - v4.1.0"},{"location":"api/4.1.0/#math","text":"","title":"Math"},{"location":"api/4.1.0/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/4.1.0/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/4.1.0/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.1.0/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.1.0/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.1.0/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/4.1.0/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.1.0/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.1.0/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.1.0/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.1.0/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.1.0/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.1.0/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/4.1.0/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.1.0/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.1.0/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.1.0/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.1.0/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.1.0/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.1.0/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.1.0/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.1.0/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.1.0/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.1.0/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.1.0/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.1.0/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.1.0/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.1.0/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.1.0/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.1.0/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.1.0/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.1.0/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.1.0/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/4.1.0/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.1.0/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.1.0/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.1.0/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.1.0/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.1.0/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.1.0/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.1.0/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.1.0/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/4.1.1/","text":"API Docs - v4.1.1 Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"4.1.1"},{"location":"api/4.1.1/#api-docs-v411","text":"","title":"API Docs - v4.1.1"},{"location":"api/4.1.1/#math","text":"","title":"Math"},{"location":"api/4.1.1/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/4.1.1/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/4.1.1/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/4.1.1/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/4.1.1/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/4.1.1/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/4.1.1/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/4.1.1/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/4.1.1/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/4.1.1/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/4.1.1/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/4.1.1/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/4.1.1/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/4.1.1/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/4.1.1/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/4.1.1/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/4.1.1/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/4.1.1/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/4.1.1/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/4.1.1/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/4.1.1/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/4.1.1/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/4.1.1/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/4.1.1/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/4.1.1/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/4.1.1/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/4.1.1/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/4.1.1/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/4.1.1/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/4.1.1/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/4.1.1/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/4.1.1/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/4.1.1/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/4.1.1/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/4.1.1/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/4.1.1/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/4.1.1/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/4.1.1/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/4.1.1/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/4.1.1/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/4.1.1/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/4.1.1/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/5.0.1/","text":"API Docs - v5.0.1 Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"5.0.1"},{"location":"api/5.0.1/#api-docs-v501","text":"","title":"API Docs - v5.0.1"},{"location":"api/5.0.1/#math","text":"","title":"Math"},{"location":"api/5.0.1/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/5.0.1/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/5.0.1/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/5.0.1/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/5.0.1/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/5.0.1/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/5.0.1/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/5.0.1/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/5.0.1/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/5.0.1/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/5.0.1/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/5.0.1/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/5.0.1/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/5.0.1/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/5.0.1/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/5.0.1/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/5.0.1/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/5.0.1/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/5.0.1/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/5.0.1/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/5.0.1/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/5.0.1/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/5.0.1/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/5.0.1/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/5.0.1/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/5.0.1/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/5.0.1/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/5.0.1/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/5.0.1/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/5.0.1/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/5.0.1/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/5.0.1/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/5.0.1/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/5.0.1/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/5.0.1/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/5.0.1/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/5.0.1/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/5.0.1/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/5.0.1/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/5.0.1/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/5.0.1/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/5.0.1/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/5.0.2/","text":"API Docs - v5.0.2 Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"5.0.2"},{"location":"api/5.0.2/#api-docs-v502","text":"","title":"API Docs - v5.0.2"},{"location":"api/5.0.2/#math","text":"","title":"Math"},{"location":"api/5.0.2/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No No p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/5.0.2/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/5.0.2/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/5.0.2/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/5.0.2/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No No p1 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/5.0.2/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/5.0.2/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/5.0.2/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/5.0.2/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No No from.base The source base of the input parameter 'a'. INT No No to.base The target base that the input parameter 'a' should be converted into. INT No No Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/5.0.2/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/5.0.2/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/5.0.2/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/5.0.2/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/5.0.2/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/5.0.2/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/5.0.2/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/5.0.2/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/5.0.2/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/5.0.2/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/5.0.2/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/5.0.2/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No No base The base value of the ouput. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/5.0.2/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/5.0.2/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/5.0.2/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No No p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/5.0.2/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No No p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/5.0.2/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No No Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/5.0.2/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/5.0.2/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/5.0.2/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/5.0.2/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No No Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/5.0.2/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/5.0.2/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No No to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/5.0.2/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes No Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/5.0.2/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/5.0.2/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/5.0.2/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/5.0.2/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/5.0.2/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/5.0.2/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/5.0.2/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/5.0.2/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/5.0.2/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No No Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/5.0.3/","text":"API Docs - v5.0.3 Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions. Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"5.0.3"},{"location":"api/5.0.3/#api-docs-v503","text":"Tested Siddhi Core version: 5.0.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.3"},{"location":"api/5.0.3/#math","text":"","title":"Math"},{"location":"api/5.0.3/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/5.0.3/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/5.0.3/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/5.0.3/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/5.0.3/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/5.0.3/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/5.0.3/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/5.0.3/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/5.0.3/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/5.0.3/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/5.0.3/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/5.0.3/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/5.0.3/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/5.0.3/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/5.0.3/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/5.0.3/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/5.0.3/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/5.0.3/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/5.0.3/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/5.0.3/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/5.0.3/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/5.0.3/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/5.0.3/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/5.0.3/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/5.0.3/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/5.0.3/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/5.0.3/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/5.0.3/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/5.0.3/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/5.0.3/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/5.0.3/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/5.0.3/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/5.0.3/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/5.0.3/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/5.0.3/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/5.0.3/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/5.0.3/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/5.0.3/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/5.0.3/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/5.0.3/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/5.0.3/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/5.0.3/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/5.0.4/","text":"API Docs - v5.0.4 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"5.0.4"},{"location":"api/5.0.4/#api-docs-v504","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.4"},{"location":"api/5.0.4/#math","text":"","title":"Math"},{"location":"api/5.0.4/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/5.0.4/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/5.0.4/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/5.0.4/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/5.0.4/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/5.0.4/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/5.0.4/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/5.0.4/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/5.0.4/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/5.0.4/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/5.0.4/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/5.0.4/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/5.0.4/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/5.0.4/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/5.0.4/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/5.0.4/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/5.0.4/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/5.0.4/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/5.0.4/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/5.0.4/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/5.0.4/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/5.0.4/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/5.0.4/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/5.0.4/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/5.0.4/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/5.0.4/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/5.0.4/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/5.0.4/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/5.0.4/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/5.0.4/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/5.0.4/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/5.0.4/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/5.0.4/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/5.0.4/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/5.0.4/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/5.0.4/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/5.0.4/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/5.0.4/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/5.0.4/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/5.0.4/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/5.0.4/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/5.0.4/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/5.0.5/","text":"API Docs - v5.0.5 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"5.0.5"},{"location":"api/5.0.5/#api-docs-v505","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.5"},{"location":"api/5.0.5/#math","text":"","title":"Math"},{"location":"api/5.0.5/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/5.0.5/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/5.0.5/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/5.0.5/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/5.0.5/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/5.0.5/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/5.0.5/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/5.0.5/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/5.0.5/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/5.0.5/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/5.0.5/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/5.0.5/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/5.0.5/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/5.0.5/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/5.0.5/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/5.0.5/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/5.0.5/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/5.0.5/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/5.0.5/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/5.0.5/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/5.0.5/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/5.0.5/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/5.0.5/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/5.0.5/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/5.0.5/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/5.0.5/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/5.0.5/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/5.0.5/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/5.0.5/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/5.0.5/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/5.0.5/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/5.0.5/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/5.0.5/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/5.0.5/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/5.0.5/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/5.0.5/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/5.0.5/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/5.0.5/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/5.0.5/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/5.0.5/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/5.0.5/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/5.0.5/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/5.0.6/","text":"API Docs - v5.0.6 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"5.0.6"},{"location":"api/5.0.6/#api-docs-v506","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.6"},{"location":"api/5.0.6/#math","text":"","title":"Math"},{"location":"api/5.0.6/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/5.0.6/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/5.0.6/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/5.0.6/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/5.0.6/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/5.0.6/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/5.0.6/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/5.0.6/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/5.0.6/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/5.0.6/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/5.0.6/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/5.0.6/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/5.0.6/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/5.0.6/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/5.0.6/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/5.0.6/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/5.0.6/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/5.0.6/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/5.0.6/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/5.0.6/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/5.0.6/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/5.0.6/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/5.0.6/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/5.0.6/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/5.0.6/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/5.0.6/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/5.0.6/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/5.0.6/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/5.0.6/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/5.0.6/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/5.0.6/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/5.0.6/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/5.0.6/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/5.0.6/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/5.0.6/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/5.0.6/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/5.0.6/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/5.0.6/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/5.0.6/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/5.0.6/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/5.0.6/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/5.0.6/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"},{"location":"api/latest/","text":"API Docs - v5.0.6 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Math percentile (Aggregate Function) This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events. abs (Function) This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream. acos (Function) If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979. asin (Function) If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989. atan (Function) 1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352. bin (Function) This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'. cbrt (Function) This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356. ceil (Function) This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0. conv (Function) This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\". copySign (Function) This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6. cos (Function) This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661. cosh (Function) This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559. e (Function) This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream. exp (Function) This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505. floor (Function) This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0. getExponent (Function) This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15. hex (Function) This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\". isInfinite (Function) This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true. isNan (Function) This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true. ln (Function) This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579. log (Function) This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034. log10 (Function) This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832. log2 (Function) This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696. max (Function) This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67. min (Function) This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91. oct (Function) This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\". parseDouble (Function) This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0. parseFloat (Function) This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0. parseInt (Function) This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123. parseLong (Function) This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123. pi (Function) This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793. power (Function) This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996. rand (Function) This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand(). round (Function) This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252. signum (Function) This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1. sin (Function) This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586. sinh (Function) This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922. sqrt (Function) This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2. tan (Function) This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915. tanh (Function) This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956. toDegrees (Function) This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394. toRadians (Function) This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"latest"},{"location":"api/latest/#api-docs-v506","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.6"},{"location":"api/latest/#math","text":"","title":"Math"},{"location":"api/latest/#percentile-aggregate-function","text":"This functions returns the pth percentile value of a given argument. Syntax DOUBLE math:percentile( INT|LONG|FLOAT|DOUBLE arg, DOUBLE p) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value of the parameter whose percentile should be found. INT LONG FLOAT DOUBLE No Yes p Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100. DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (sensorId int, temperature double); from InValueStream select math:percentile(temperature, 97.0) as percentile insert into OutMediationStream; This function returns the percentile value based on the argument given. For example, math:percentile(temperature, 97.0) returns the 97th percentile value of all the temperature events.","title":"percentile (Aggregate Function)"},{"location":"api/latest/#abs-function","text":"This function returns the absolute value of the given parameter. It wraps the java.lang.Math.abs() function. Syntax DOUBLE math:abs( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The parameter whose absolute value is found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:abs(inValue) as absValue insert into OutMediationStream; Irrespective of whether the 'invalue' in the input stream holds a value of abs(3) or abs(-3),the function returns 3 since the absolute value of both 3 and -3 is 3. The result directed to OutMediationStream stream.","title":"abs (Function)"},{"location":"api/latest/#acos-function","text":"If -1 = p1 = 1, this function returns the arc-cosine (inverse cosine) value of p1.If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.acos() function. Syntax DOUBLE math:acos( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-cosine (inverse cosine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:acos(inValue) as acosValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-cosine value of it and returns the arc-cosine value to the output stream, OutMediationStream. For example, acos(0.5) returns 1.0471975511965979.","title":"acos (Function)"},{"location":"api/latest/#asin-function","text":"If -1 = p1 = 1, this function returns the arc-sin (inverse sine) value of p1. If the domain is invalid, it returns NULL. The value returned is in radian scale. This function wraps the java.lang.Math.asin() function. Syntax DOUBLE math:asin( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-sin (inverse sine) value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:asin(inValue) as asinValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the arc-sin value of it and returns the arc-sin value to the output stream, OutMediationStream. For example, asin(0.5) returns 0.5235987755982989.","title":"asin (Function)"},{"location":"api/latest/#atan-function","text":"1. If a single p1 is received, this function returns the arc-tangent (inverse tangent) value of p1 . 2. If p1 is received along with an optional p1 , it considers them as x and y coordinates and returns the arc-tangent (inverse tangent) value. The returned value is in radian scale. This function wraps the java.lang.Math.atan() function. Syntax DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1) DOUBLE math:atan( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair. INT LONG FLOAT DOUBLE No Yes p2 This optional parameter represents the y coordinate of the (x,y) coordinate pair. 0D INT LONG FLOAT DOUBLE Yes Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:atan(inValue1, inValue2) as convertedValue insert into OutMediationStream; If the 'inValue1' in the input stream is given, the function calculates the arc-tangent value of it and returns the arc-tangent value to the output stream, OutMediationStream. If both the 'inValue1' and 'inValue2' are given, then the function considers them to be x and y coordinates respectively and returns the calculated arc-tangent value to the output stream, OutMediationStream. For example, atan(12d, 5d) returns 1.1760052070951352.","title":"atan (Function)"},{"location":"api/latest/#bin-function","text":"This function returns a string representation of the p1 argument, that is of either 'integer' or 'long' data type, as an unsigned integer in base 2. It wraps the java.lang.Integer.toBinaryString and java.lang.Long.toBinaryString` methods. Syntax STRING math:bin( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value in either 'integer' or 'long', that should be converted into an unsigned integer of base 2. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:bin(inValue) as binValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function converts it into an unsigned integer in base 2 and directs the output to the output stream, OutMediationStream. For example, bin(9) returns '1001'.","title":"bin (Function)"},{"location":"api/latest/#cbrt-function","text":"This function returns the cube-root of 'p1' which is in radians. It wraps the java.lang.Math.cbrt() function. Syntax DOUBLE math:cbrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cube-root should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cbrt(inValue) as cbrtValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cube-root value for the same and directs the output to the output stream, OutMediationStream. For example, cbrt(17d) returns 2.5712815906582356.","title":"cbrt (Function)"},{"location":"api/latest/#ceil-function","text":"This function returns the smallest double value, i.e., the closest to the negative infinity, that is greater than or equal to the p1 argument, and is equal to a mathematical integer. It wraps the java.lang.Math.ceil() method. Syntax DOUBLE math:ceil( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose ceiling value is found. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ceil(inValue) as ceilingValue insert into OutMediationStream; This function calculates the ceiling value of the given 'inValue' and directs the result to 'OutMediationStream' output stream. For example, ceil(423.187d) returns 424.0.","title":"ceil (Function)"},{"location":"api/latest/#conv-function","text":"This function converts a from the fromBase base to the toBase base. Syntax STRING math:conv( STRING a, INT from.base, INT to.base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic a The value whose base should be changed. Input should be given as a 'String'. STRING No Yes from.base The source base of the input parameter 'a'. INT No Yes to.base The target base that the input parameter 'a' should be converted into. INT No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string,fromBase int,toBase int); from InValueStream select math:conv(inValue,fromBase,toBase) as convertedValue insert into OutMediationStream; If the 'inValue' in the input stream is given, and the base in which it currently resides in and the base to which it should be converted to is specified, the function converts it into a string in the target base and directs it to the output stream, OutMediationStream. For example, conv(\"7f\", 16, 10) returns \"127\".","title":"conv (Function)"},{"location":"api/latest/#copysign-function","text":"This function returns a value of an input with the received magnitude and sign of another input. It wraps the java.lang.Math.copySign() function. Syntax DOUBLE math:copySign( INT|LONG|FLOAT|DOUBLE magnitude, INT|LONG|FLOAT|DOUBLE sign) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic magnitude The magnitude of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes sign The sign of this parameter is used in the output attribute. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:copySign(inValue1,inValue2) as copysignValue insert into OutMediationStream; If two values are provided as 'inValue1' and 'inValue2', the function copies the magnitude and sign of the second argument into the first one and directs the result to the output stream, OutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6.","title":"copySign (Function)"},{"location":"api/latest/#cos-function","text":"This function returns the cosine of p1 which is in radians. It wraps the java.lang.Math.cos() function. Syntax DOUBLE math:cos( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose cosine value should be found.The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cos(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cos(6d) returns 0.9601702866503661.","title":"cos (Function)"},{"location":"api/latest/#cosh-function","text":"This function returns the hyperbolic cosine of p1 which is in radians. It wraps the java.lang.Math.cosh() function. Syntax DOUBLE math:cosh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:cosh(inValue) as cosValue insert into OutMediationStream; If the 'inValue' is given, the function calculates the hyperbolic cosine value for the same and directs the output to the output stream, OutMediationStream. For example, cosh (6d) returns 201.7156361224559.","title":"cosh (Function)"},{"location":"api/latest/#e-function","text":"This function returns the java.lang.Math.E constant, which is the closest double value to e, where e is the base of the natural logarithms. Syntax DOUBLE math:e() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:e() as eValue insert into OutMediationStream; This function returns the constant, 2.7182818284590452354 which is the closest double value to e and directs the output to 'OutMediationStream' output stream.","title":"e (Function)"},{"location":"api/latest/#exp-function","text":"This function returns the Euler's number e raised to the power of p1 . It wraps the java.lang.Math.exp() function. Syntax DOUBLE math:exp( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The power that the Euler's number e is raised to. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:exp(inValue) as expValue insert into OutMediationStream; If the 'inValue' in the inputstream holds a value, this function calculates the corresponding Euler's number 'e' and directs it to the output stream, OutMediationStream. For example, exp(10.23) returns 27722.51006805505.","title":"exp (Function)"},{"location":"api/latest/#floor-function","text":"This function wraps the java.lang.Math.floor() function and returns the largest value, i.e., closest to the positive infinity, that is less than or equal to p1 , and is equal to a mathematical integer. Syntax DOUBLE math:floor( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose floor value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:floor(inValue) as floorValue insert into OutMediationStream; This function calculates the floor value of the given 'inValue' input and directs the output to the 'OutMediationStream' output stream. For example, (10.23) returns 10.0.","title":"floor (Function)"},{"location":"api/latest/#getexponent-function","text":"This function returns the unbiased exponent that is used in the representation of p1 . This function wraps the java.lang.Math.getExponent() function. Syntax INT math:getExponent( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of whose unbiased exponent representation should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:getExponent(inValue) as expValue insert into OutMediationStream; This function calculates the unbiased exponent of a given input, 'inValue' and directs the result to the 'OutMediationStream' output stream. For example, getExponent(60984.1) returns 15.","title":"getExponent (Function)"},{"location":"api/latest/#hex-function","text":"This function wraps the java.lang.Double.toHexString() function. It returns a hexadecimal string representation of the input, p1`. Syntax STRING math:hex( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hexadecimal value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue int); from InValueStream select math:hex(inValue) as hexString insert into OutMediationStream; If the 'inValue' in the input stream is provided, the function converts this into its corresponding hexadecimal format and directs the output to the output stream, OutMediationStream. For example, hex(200) returns \"c8\".","title":"hex (Function)"},{"location":"api/latest/#isinfinite-function","text":"This function wraps the java.lang.Float.isInfinite() and java.lang.Double.isInfinite() and returns true if p1 is infinitely large in magnitude and false if otherwise. Syntax BOOL math:isInfinite( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 This is the value of the parameter that the function determines to be either infinite or finite. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isInfinite(inValue1) as isInfinite insert into OutMediationStream; If the value given in the 'inValue' in the input stream is of infinitely large magnitude, the function returns the value, 'true' and directs the result to the output stream, OutMediationStream'. For example, isInfinite(java.lang.Double.POSITIVE_INFINITY) returns true.","title":"isInfinite (Function)"},{"location":"api/latest/#isnan-function","text":"This function wraps the java.lang.Float.isNaN() and java.lang.Double.isNaN() functions and returns true if p1 is NaN (Not-a-Number), and returns false if otherwise. Syntax BOOL math:isNan( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter which the function determines to be either NaN or a number. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:isNan(inValue1) as isNaN insert into OutMediationStream; If the 'inValue1' in the input stream has a value that is undefined, then the function considers it as an 'NaN' value and directs 'True' to the output stream, OutMediationStream. For example, isNan(java.lang.Math.log(-12d)) returns true.","title":"isNan (Function)"},{"location":"api/latest/#ln-function","text":"This function returns the natural logarithm (base e) of p1 . Syntax DOUBLE math:ln( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose natural logarithm (base e) should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:ln(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates its natural logarithm (base e) and directs the results to the output stream, 'OutMeditionStream'. For example, ln(11.453) returns 2.438251704415579.","title":"ln (Function)"},{"location":"api/latest/#log-function","text":"This function returns the logarithm of the received number as per the given base . Syntax DOUBLE math:log( INT|LONG|FLOAT|DOUBLE number, INT|LONG|FLOAT|DOUBLE base) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic number The value of the parameter whose base should be changed. INT LONG FLOAT DOUBLE No Yes base The base value of the ouput. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (number double, base double); from InValueStream select math:log(number, base) as logValue insert into OutMediationStream; If the number and the base to which it has to be converted into is given in the input stream, the function calculates the number to the base specified and directs the result to the output stream, OutMediationStream. For example, log(34, 2f) returns 5.08746284125034.","title":"log (Function)"},{"location":"api/latest/#log10-function","text":"This function returns the base 10 logarithm of p1 . Syntax DOUBLE math:log10( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 10 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log10(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 10 logarithm of the same and directs the result to the output stream, OutMediatioStream. For example, log10(19.234) returns 1.2840696117100832.","title":"log10 (Function)"},{"location":"api/latest/#log2-function","text":"This function returns the base 2 logarithm of p1 . Syntax DOUBLE math:log2( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose base 2 logarithm should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:log2(inValue) as lnValue insert into OutMediationStream; If the 'inValue' in the input stream is given, the function calculates the base 2 logarithm of the same and returns the value to the output stream, OutMediationStream. For example log2(91d) returns 6.507794640198696.","title":"log2 (Function)"},{"location":"api/latest/#max-function","text":"This function returns the greater value of p1 and p2 . Syntax DOUBLE math:max( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values to be compared in order to find the larger value of the two INT LONG FLOAT DOUBLE No Yes p2 The input value to be compared with 'p1' in order to find the larger value of the two. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:max(inValue1,inValue2) as maxValue insert into OutMediationStream; If two input values 'inValue1, and 'inValue2' are given, the function compares them and directs the larger value to the output stream, OutMediationStream. For example, max(123.67d, 91) returns 123.67.","title":"max (Function)"},{"location":"api/latest/#min-function","text":"This function returns the smaller value of p1 and p2 . Syntax DOUBLE math:min( INT|LONG|FLOAT|DOUBLE p1, INT|LONG|FLOAT|DOUBLE p2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 One of the input values that are to be compared in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes p2 The input value that is to be compared with 'p1' in order to find the smaller value. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double,inValue2 int); from InValueStream select math:min(inValue1,inValue2) as minValue insert into OutMediationStream; If two input values, 'inValue1' and 'inValue2' are given, the function compares them and directs the smaller value of the two to the output stream, OutMediationStream. For example, min(123.67d, 91) returns 91.","title":"min (Function)"},{"location":"api/latest/#oct-function","text":"This function converts the input parameter p1 to octal. Syntax STRING math:oct( INT|LONG p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose octal representation should be found. INT LONG No Yes Examples EXAMPLE 1 define stream InValueStream (inValue long); from InValueStream select math:oct(inValue) as octValue insert into OutMediationStream; If the 'inValue' in the input stream is given, this function calculates the octal value corresponding to the same and directs it to the output stream, OutMediationStream. For example, oct(99l) returns \"143\".","title":"oct (Function)"},{"location":"api/latest/#parsedouble-function","text":"This function returns the double value of the string received. Syntax DOUBLE math:parseDouble( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a double value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseDouble(inValue) as output insert into OutMediationStream; If the 'inValue' in the input stream holds a value, this function converts it into the corresponding double value and directs it to the output stream, OutMediationStream. For example, parseDouble(\"123\") returns 123.0.","title":"parseDouble (Function)"},{"location":"api/latest/#parsefloat-function","text":"This function returns the float value of the received string. Syntax FLOAT math:parseFloat( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted into a float value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseFloat(inValue) as output insert into OutMediationStream; The function converts the input value given in 'inValue',into its corresponding float value and directs the result into the output stream, OutMediationStream. For example, parseFloat(\"123\") returns 123.0.","title":"parseFloat (Function)"},{"location":"api/latest/#parseint-function","text":"This function returns the integer value of the received string. Syntax INT math:parseInt( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to an integer. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseInt(inValue) as output insert into OutMediationStream; The function converts the 'inValue' into its corresponding integer value and directs the output to the output stream, OutMediationStream. For example, parseInt(\"123\") returns 123.","title":"parseInt (Function)"},{"location":"api/latest/#parselong-function","text":"This function returns the long value of the string received. Syntax LONG math:parseLong( STRING p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be converted to a long value. STRING No Yes Examples EXAMPLE 1 define stream InValueStream (inValue string); from InValueStream select math:parseLong(inValue) as output insert into OutMediationStream; The function converts the 'inValue' to its corresponding long value and directs the result to the output stream, OutMediationStream. For example, parseLong(\"123\") returns 123.","title":"parseLong (Function)"},{"location":"api/latest/#pi-function","text":"This function returns the java.lang.Math.PI constant, which is the closest value to pi, i.e., the ratio of the circumference of a circle to its diameter. Syntax DOUBLE math:pi() Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:pi() as piValue insert into OutMediationStream; pi() always returns 3.141592653589793.","title":"pi (Function)"},{"location":"api/latest/#power-function","text":"This function raises the given value to a given power. Syntax DOUBLE math:power( INT|LONG|FLOAT|DOUBLE value, INT|LONG|FLOAT|DOUBLE to.power) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value The value that should be raised to the power of 'to.power' input parameter. INT LONG FLOAT DOUBLE No Yes to.power The power to which the 'value' input parameter should be raised. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue1 double, inValue2 double); from InValueStream select math:power(inValue1,inValue2) as powerValue insert into OutMediationStream; This function raises the 'inValue1' to the power of 'inValue2' and directs the output to the output stream, 'OutMediationStream. For example, (5.6d, 3.0d) returns 175.61599999999996.","title":"power (Function)"},{"location":"api/latest/#rand-function","text":"This returns a stream of pseudo-random numbers when a sequence of calls are sent to the rand() . Optionally, it is possible to define a seed, i.e., rand(seed) using which the pseudo-random numbers are generated. These functions internally use the java.util.Random class. Syntax DOUBLE math:rand() DOUBLE math:rand( INT|LONG seed) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic seed An optional seed value that will be used to generate the random number sequence. defaultSeed INT LONG Yes Yes Examples EXAMPLE 1 define stream InValueStream (symbol string, price long, volume long); from InValueStream select symbol, math:rand() as randNumber select math:oct(inValue) as octValue insert into OutMediationStream; In the example given above, a random double value between 0 and 1 will be generated using math:rand().","title":"rand (Function)"},{"location":"api/latest/#round-function","text":"This function returns the value of the input argument rounded off to the closest integer/long value. Syntax INT|LONG math:round( FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be rounded off to the closest integer/long value. FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:round(inValue) as roundValue insert into OutMediationStream; The function rounds off 'inValue1' to the closest int/long value and directs the output to the output stream, 'OutMediationStream'. For example, round(3252.353) returns 3252.","title":"round (Function)"},{"location":"api/latest/#signum-function","text":"This returns +1, 0, or -1 for the given positive, zero and negative values respectively. This function wraps the java.lang.Math.signum() function. Syntax INT math:signum( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value that should be checked to be positive, negative or zero. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:signum(inValue) as sign insert into OutMediationStream; The function evaluates the 'inValue' given to be positive, negative or zero and directs the result to the output stream, 'OutMediationStream'. For example, signum(-6.32d) returns -1.","title":"signum (Function)"},{"location":"api/latest/#sin-function","text":"This returns the sine of the value given in radians. This function wraps the java.lang.Math.sin() function. Syntax DOUBLE math:sin( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sin(inValue) as sinValue insert into OutMediationStream; The function calculates the sine value of the given 'inValue' and directs the output to the output stream, 'OutMediationStream. For example, sin(6d) returns -0.27941549819892586.","title":"sin (Function)"},{"location":"api/latest/#sinh-function","text":"This returns the hyperbolic sine of the value given in radians. This function wraps the java.lang.Math.sinh() function. Syntax DOUBLE math:sinh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sinh(inValue) as sinhValue insert into OutMediationStream; This function calculates the hyperbolic sine value of 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sinh(6d) returns 201.71315737027922.","title":"sinh (Function)"},{"location":"api/latest/#sqrt-function","text":"This function returns the square-root of the given value. It wraps the java.lang.Math.sqrt() s function. Syntax DOUBLE math:sqrt( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose square-root value should be found. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:sqrt(inValue) as sqrtValue insert into OutMediationStream; The function calculates the square-root value of the 'inValue' and directs the output to the output stream, 'OutMediationStream'. For example, sqrt(4d) returns 2.","title":"sqrt (Function)"},{"location":"api/latest/#tan-function","text":"This function returns the tan of the given value in radians. It wraps the java.lang.Math.tan() function. Syntax DOUBLE math:tan( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose tan value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tan(inValue) as tanValue insert into OutMediationStream; This function calculates the tan value of the 'inValue' given and directs the output to the output stream, 'OutMediationStream'. For example, tan(6d) returns -0.29100619138474915.","title":"tan (Function)"},{"location":"api/latest/#tanh-function","text":"This function returns the hyperbolic tangent of the value given in radians. It wraps the java.lang.Math.tanh() function. Syntax DOUBLE math:tanh( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:tanh(inValue) as tanhValue insert into OutMediationStream; If the 'inVaue' in the input stream is given, this function calculates the hyperbolic tangent value of the same and directs the output to 'OutMediationStream' stream. For example, tanh(6d) returns 0.9999877116507956.","title":"tanh (Function)"},{"location":"api/latest/#todegrees-function","text":"This function converts the value given in radians to degrees. It wraps the java.lang.Math.toDegrees() function. Syntax DOUBLE math:toDegrees( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in radians that should be converted to degrees. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toDegrees(inValue) as degreesValue insert into OutMediationStream; The function converts the 'inValue' in the input stream from radians to degrees and directs the output to 'OutMediationStream' output stream. For example, toDegrees(6d) returns 343.77467707849394.","title":"toDegrees (Function)"},{"location":"api/latest/#toradians-function","text":"This function converts the value given in degrees to radians. It wraps the java.lang.Math.toRadians() function. Syntax DOUBLE math:toRadians( INT|LONG|FLOAT|DOUBLE p1) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic p1 The input value in degrees that should be converted to radians. INT LONG FLOAT DOUBLE No Yes Examples EXAMPLE 1 define stream InValueStream (inValue double); from InValueStream select math:toRadians(inValue) as radiansValue insert into OutMediationStream; This function converts the input, from degrees to radians and directs the result to 'OutMediationStream' output stream. For example, toRadians(6d) returns 0.10471975511965977.","title":"toRadians (Function)"}]}